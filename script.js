// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
let tg = window.Telegram.WebApp; // –û–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Web App
let currentDice1 = 1; // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞
let currentDice2 = 1; // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞ 
let throws = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
let gameSession = {
    throws: [],
    isActive: false
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    console.log('Page loaded');
    initializeApp();
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    console.log('Initializing app');
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ Telegram Web App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MainButton
    tg.MainButton.setParams({
        text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É',
        color: '#ff3b30',
    });
    tg.MainButton.hide();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MainButton –æ–¥–∏–Ω —Ä–∞–∑
    tg.MainButton.onClick(function() {
        endGameSession();
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    gameSession.isActive = true;
    gameSession.throws = [];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const dice1Buttons = document.getElementById('dice1Buttons'); // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞
    const dice2Buttons = document.getElementById('dice2Buttons'); // –ö–Ω–æ–ø–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞
    const submitButton = document.getElementById('submitButton'); // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞
    dice1Buttons.addEventListener('click', function(e) {
        if (e.target.tagName === 'BUTTON') {
            const value = parseInt(e.target.getAttribute('data-value'));
            setDice1(value);
            console.log('Dice 1 clicked:', value);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞
    dice2Buttons.addEventListener('click', function(e) {
        if (e.target.tagName === 'BUTTON') {
            const value = parseInt(e.target.getAttribute('data-value'));
            setDice2(value);
            console.log('Dice 2 clicked:', value);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    submitButton.addEventListener('click', function() {
        submitThrow();
        console.log('Submit clicked');
    });
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞
function setDice1(value) {
    currentDice1 = value;
    document.getElementById('dice1Display').textContent = value; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    highlightSelectedButton('dice1Buttons', value); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞
function setDice2(value) {
    currentDice2 = value;
    document.getElementById('dice2Display').textContent = value; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    highlightSelectedButton('dice2Buttons', value); // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
function highlightSelectedButton(containerId, value) {
    const container = document.getElementById(containerId);
    const buttons = container.getElementsByTagName('button');
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ÉÔøΩÔøΩ
    for (let button of buttons) {
        if (parseInt(button.getAttribute('data-value')) === value) {
            button.classList.add('selected');
        } else {
            button.classList.remove('selected');
        }
    }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –¥—É–±–ª–µ–π
function calculateThrowSum(dice1, dice2) {
    if (dice1 === dice2) {
        return (dice1 + dice2) * 2; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2, —Ç–∞–∫ –∫–∞–∫ —Å—É–º–º–∞ —É–∂–µ —É–¥–≤–æ–µ–Ω–∞
    }
    return dice1 + dice2;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateHistory
function updateHistory() {
    const historyDiv = document.getElementById('throwsHistory');
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –¥—É–±–ª–µ–π
    const totalSum = throws.reduce((sum, t) => {
        return sum + calculateThrowSum(t.dice[0], t.dice[1]);
    }, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–ª–∞—à–∫–µ
    const currentStatsSum = document.querySelector('.current-stats .sum');
    const currentStatsCount = document.querySelector('.current-stats span:last-child');
    currentStatsSum.textContent = `–°—É–º–º–∞: ${totalSum}`;
    currentStatsCount.textContent = `–ë—Ä–æ—Å–∫–æ–≤: ${throws.length}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ—Å–∫–æ–≤
    historyDiv.innerHTML = throws
        .map((t, i) => {
            const sum = calculateThrowSum(t.dice[0], t.dice[1]);
            const isDubble = t.dice[0] === t.dice[1];
            return `
                <div class="throw-record">
                    <div class="throw-info">
                        <span>–ë—Ä–æ—Å–æ–∫ ${throws.length - i}: ${t.dice[0]}-${t.dice[1]}</span>
                        <span class="sum">${isDubble ? 'üéØ ' : ''}${sum}</span>
                    </div>
                    ${i === 0 ? '<button class="delete-button" onclick="deleteLastThrow()">‚ùå</button>' : ''}
                </div>
            `;
        })
        .join('');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é deleteLastThrow
function deleteLastThrow() {
    if (throws.length > 0) {
        tg.showConfirm(
            '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫?',
            (confirmed) => {
                if (confirmed) {
                    throws.shift();
                    gameSession.throws.pop();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    updateHistory();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
                    if (throws.length > 0) {
                        tg.MainButton.setText(`–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (${throws.length} üé≤)`);
                    } else {
                        tg.MainButton.hide();
                    }
                    
                    console.log('Last throw deleted');
                }
            }
        );
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é submitThrow
function submitThrow() {
    const throwData = {
        dice: [currentDice1, currentDice2],
        sum: calculateThrowSum(currentDice1, currentDice2),
        timestamp: new Date().toISOString()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ—Å–æ–∫ –≤ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞
    gameSession.throws.push(throwData);
    throws.unshift(throwData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateHistory();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º MainButton –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞
    if (!tg.MainButton.isVisible) {
        tg.MainButton.show();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    tg.MainButton.setText(`–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (${throws.length} üé≤)`);
    
    console.log('Throw added:', throwData);
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
function endGameSession() {
    if (throws.length === 0) {
        console.log('No throws to send');
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ Telegram
    tg.showConfirm(
        '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?',
        (confirmed) => {
            if (confirmed) {
                const sessionData = {
                    type: 'game_session',
                    throws: throws
                };
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –±–æ—Ç
                tg.sendData(JSON.stringify(sessionData));
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                throws = [];
                gameSession.throws = [];
                gameSession.isActive = false;
                
                console.log('Game session ended and data sent:', sessionData);
            } else {
                console.log('Game session end cancelled by user');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                tg.MainButton.setText(`–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (${throws.length} üé≤)`);
            }
        }
    );
}